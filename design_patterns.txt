#design pattern notes

목차
1. welcome to design patterns.
    use and benefits of design patterns
    #the best way to use patterns is to load your brain w/ them, apply
2. Keeping your objects in the know
    objects can be decided at runtime 
3. decorating objects
    re-examining the typical overuse of inheritance, 
    learn how to decorate my classes at runtime using a form of object composition. 
4. baking with OO Goodness
    loosely coupled OO designs
    more to making objects than just using the new operator.
    will learn instantiatons that be done in public can cause coupling problems.
    Factory Pattens can help this
5. One of a kind objects
    Singlestone Pattern : there is only one instance.
6. Encapsulation Invocation
    whole level encapsulation : 
7. being adaptive
8. encapsulating Algorithms
    encapsulating "pieces of Algorithms"
9. well- managed collections
    show my objects without ever seeing how I store my objects
10. the state of thing
11. Controlling object access
    proxy : control and mangage access

12. Patterns of Patterns
    Patterns could work together
13. Patterns in the real world
14. appendix : leftover patterns
    not most popular.
basics
1. abstraction
2. cabsulation
3. 
4. heritage

    객체지향의 원칙
    1. 바뀌는 부분은 캡슐화한다
    2. 상속보다는 구성을 활용한다.
    3. 구현이 아닌 인터페이스에 맞춰서 프로그래밍한다.
    4. 서로 상호작용을 하는 객체 사이에서는 가능하면 느슨하게 결합하는 디자인을 사용한다.
    5. 클래스는  확장에 대해서는 열려 있지만 변경에 대해서는 닫혀 잇어야 한다. 
    추상화된 것에 의존해라. 구상 클래스에 의존하지 않아야 한다.
    친한